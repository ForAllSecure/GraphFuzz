
config:
  type: config
  finalizer: |
    close_all();

typedef_iwkv_opflags:
  type: typedef
  value: uint8_t
  name: iwkv_opflags

enum_IWKV_cursor_op:
  type: enum
  name: IWKV_cursor_op
  values:
    - IWKV_CURSOR_BEFORE_FIRST
    - IWKV_CURSOR_AFTER_LAST
    - IWKV_CURSOR_NEXT
    - IWKV_CURSOR_PREV
    - IWKV_CURSOR_EQ
    - IWKV_CURSOR_GE

struct_IWKV:
  type: struct
  name: IWKV
  headers: ['<iowow/iwkv.h>', 'db_tracker.h']
  static_methods:
    - open:
        outputs: ['IWKV']
        exec: |
          $o0 = new_db();
    - close:
        inputs: ['IWKV']
        exec: |
          // forget

struct_IWDB:
  type: struct
  name: IWDB
  headers: ['<iowow/iwkv.h>']
  static_methods:
    # - iwkv_db:
    #     inputs: ['IWKV']
    #     outputs: ['IWKV', 'IWDB']
    #     args: ['int', 'int']
    #     exec: |
    #       $o1 = MAKE(IWDB);
    #       iwkv_db(*$i0, $a0, $a1, $o1);
    #       $o0 = $i0;
    - iwkv_db_destroy(IWDB *dbp);:
        inputs: ['IWDB']
        exec: |
          // iwkv_db_destroy($i0);
    - iwkv_new_db:
        inputs: ['IWKV']
        outputs: ['IWKV', 'IWDB']
        args: ['int']
        exec: |
          $o1 = MAKE(IWDB);
          uint32_t a;
          iwkv_new_db(*$i0, $a0, &a, $o1);
          $o0 = $i0;
    - void iwkv_db_cache_release(IWDB db);
    - void iwkv_put(IWDB db, IWKV_val *key, IWKV_val *val, uint8_t opflags);
    - iwkv_get(IWDB db, const IWKV_val *key, IWKV_val *oval);:
        inputs: ['IWDB', 'IWKV_val']
        outputs: ['IWDB', 'IWKV_val']
        exec: |
          IWKV_val oval;
          iwkv_get(*$i0, $i1, &oval);
          $o0 = $i0;
          $o1 = $i1;
    - iwkv_db_set_meta(IWDB db, void *buf, size_t sz);:
        inputs: ['IWDB']
        outputs: ['IWDB']
        args: ['char[100]', 'uint8_t']
        exec: |
          iwkv_db_set_meta(*$i0, &$a0, $a1 % 100);
          $o0 = $i0;
    - iwkv_db_get_meta:
        inputs: ['IWDB']
        outputs: ['IWDB']
        exec: |
          char buffer[100];
          size_t rsz;
          iwkv_db_get_meta(*$i0, &buffer, 100, &rsz);
          $o0 = $i0;
    - void iwkv_del(IWDB db, const IWKV_val *key, iwkv_opflags opflags);

struct_IWKV_val:
  type: struct
  name: IWKV_val
  headers: ['<iowow/iwkv.h>']
  static_methods:
    - create:
        outputs: ['IWKV_val']
        args: ['char[100]', 'uint8_t']
        exec: |
          $o0 = MAKE(IWKV_val);
          $o0->data = (char *)calloc(100,1);
          memcpy($o0->data, $a0, 100);
          $o0->size = $a1 % 100;
    - delete:
        inputs: ['IWKV_val']
        exec: |
          free($i0->data);
          free($i0);

struct_IWKV_cursor:
  type: struct
  name: IWKV_cursor
  headers: ['<iowow/iwkv.h>']
  static_methods:
    - create:
        inputs: ['IWDB', 'IWKV_val']
        outputs: ['IWDB', 'IWKV_val', 'IWKV_cursor']
        args: ['IWKV_cursor_op']
        exec: |
          $o2 = MAKE(IWKV_cursor);
          iwrc rc = iwkv_cursor_open(*$i0, $o2, $a0, $i1);
          if (rc) {
            graphfuzz_bail();
          }
          $o0 = $i0;
          $o1 = $i1;
    - close:
        inputs: ['IWKV_cursor']
        exec: |
          iwkv_cursor_close($i0);
