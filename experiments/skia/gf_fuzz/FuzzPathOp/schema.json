{"types": [{"id": 1, "name": "SkPath"}, {"id": 2, "name": "SkOpBuilder"}, {"id": 3, "name": "SkRect"}], "scopes": [{"name": "(auto) SkPath::SkPath();", "inputs": [], "outputs": [1], "context": 0}, {"name": "(auto) SkPath::void moveTo(SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 8}, {"name": "(auto) SkPath::void lineTo(SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 8}, {"name": "(auto) SkPath::void quadTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 16}, {"name": "(auto) SkPath::void conicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 20}, {"name": "(auto) SkPath::void cubicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 24}, {"name": "(auto) SkPath::void close();", "inputs": [1], "outputs": [1], "context": 0}, {"name": "(auto) SkPath::SkRect getBounds();", "inputs": [1], "outputs": [1, 3], "context": 0}, {"name": "(auto) SkPath::void setFillType(SkPathFillType None);", "inputs": [1], "outputs": [1], "context": 1}, {"name": "(auto) SkPath::~SkPath();", "inputs": [1], "outputs": [], "context": 0}, {"name": "(auto) SkOpBuilder::SkOpBuilder();", "inputs": [], "outputs": [2], "context": 0}, {"name": "(auto) SkOpBuilder::void add(const SkPath & path, SkPathOp op);", "inputs": [2, 1], "outputs": [2, 1], "context": 1}, {"name": "(auto) SkOpBuilder::bool resolve(SkPath * result);", "inputs": [2, 1], "outputs": [2, 1], "context": 0}, {"name": "(auto) SkOpBuilder::bool Simplify(const SkPath & path, SkPath * result);", "inputs": [1, 1], "outputs": [1, 1], "context": 0}, {"name": "(auto) SkOpBuilder::bool Op(const SkPath & one, const SkPath & two, SkPathOp op, SkPath * result);", "inputs": [1, 1, 1], "outputs": [1, 1, 1], "context": 1}, {"name": "(auto) SkOpBuilder::bool AsWinding(const SkPath & path, SkPath * result);", "inputs": [1, 1], "outputs": [1, 1], "context": 0}, {"name": "(auto) SkOpBuilder::bool TightBounds(const SkPath & path, SkRect * result);", "inputs": [1, 3], "outputs": [1, 3], "context": 0}, {"name": "(auto) SkOpBuilder::~SkOpBuilder();", "inputs": [2], "outputs": [], "context": 0}, {"name": "(auto) SkRect::SkRect MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h);", "inputs": [], "outputs": [3], "context": 16}, {"name": "(auto) SkRect::~SkRect();", "inputs": [3], "outputs": [], "context": 0}]}