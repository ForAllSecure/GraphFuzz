{"types": [{"id": 1, "name": "SkPath"}, {"id": 2, "name": "SkPathMeasure"}, {"id": 3, "name": "SkRect"}, {"id": 4, "name": "SkPoint"}], "scopes": [{"name": "(auto) SkPath::SkPath();", "inputs": [], "outputs": [1], "context": 0}, {"name": "(auto) SkPath::void moveTo(SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 8}, {"name": "(auto) SkPath::void lineTo(SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 8}, {"name": "(auto) SkPath::void quadTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 16}, {"name": "(auto) SkPath::void conicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 20}, {"name": "(auto) SkPath::void cubicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [1], "outputs": [1], "context": 24}, {"name": "(auto) SkPath::void close();", "inputs": [1], "outputs": [1], "context": 0}, {"name": "(auto) SkPath::SkRect getBounds();", "inputs": [1], "outputs": [1, 3], "context": 0}, {"name": "(auto) SkPath::~SkPath();", "inputs": [1], "outputs": [], "context": 0}, {"name": "(auto) SkPathMeasure::SkPathMeasure(const SkPath & path, bool forceClosed, SkScalar resScale);", "inputs": [1], "outputs": [2, 1], "context": 5}, {"name": "(auto) SkPathMeasure::bool getPosTan(SkScalar distance, SkPoint * position, SkVector * tangent);", "inputs": [2, 4, 4], "outputs": [2, 4, 4], "context": 4}, {"name": "(auto) SkPathMeasure::bool getSegment(SkScalar startD, SkScalar stopD, SkPath * dst, bool startWithMoveTo);", "inputs": [2, 1], "outputs": [2, 1], "context": 9}, {"name": "(auto) SkPathMeasure::bool nextContour();", "inputs": [2], "outputs": [2], "context": 0}, {"name": "(auto) SkPathMeasure::~SkPathMeasure();", "inputs": [2], "outputs": [], "context": 0}, {"name": "(auto) SkRect::SkRect MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h);", "inputs": [], "outputs": [3], "context": 16}, {"name": "(auto) SkRect::~SkRect();", "inputs": [3], "outputs": [], "context": 0}, {"name": "(auto) SkPoint::SkPoint Make(SkScalar x, SkScalar y);", "inputs": [], "outputs": [4], "context": 8}, {"name": "(auto) SkPoint::~SkPoint();", "inputs": [4], "outputs": [], "context": 0}]}