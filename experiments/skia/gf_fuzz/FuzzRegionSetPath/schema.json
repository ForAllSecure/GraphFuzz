{"types": [{"id": 3, "name": "SkRect"}, {"id": 4, "name": "SkRRect"}, {"id": 5, "name": "SkMatrix"}, {"id": 6, "name": "SkPath"}, {"id": 7, "name": "SkRegion"}, {"id": 8, "name": "SkIRect"}], "scopes": [{"name": "(auto) SkRect::SkRect MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h);", "inputs": [], "outputs": [3], "context": 16}, {"name": "(auto) SkRect::~SkRect();", "inputs": [3], "outputs": [], "context": 0}, {"name": "make", "inputs": [3], "outputs": [4, 3], "context": 32}, {"name": "(auto) SkRRect::~SkRRect();", "inputs": [4], "outputs": [], "context": 0}, {"name": "void setAffine(SkScalar[6])", "inputs": [5], "outputs": [5], "context": 24}, {"name": "void set9(SkScalar[9])", "inputs": [5], "outputs": [5], "context": 36}, {"name": "(auto) SkMatrix::void postTranslate(SkScalar None, SkScalar None);", "inputs": [5], "outputs": [5], "context": 8}, {"name": "(auto) SkMatrix::SkMatrix I();", "inputs": [], "outputs": [5], "context": 0}, {"name": "(auto) SkMatrix::SkMatrix Translate(SkScalar None, SkScalar None);", "inputs": [], "outputs": [5], "context": 8}, {"name": "(auto) SkMatrix::SkMatrix Scale(SkScalar None, SkScalar None);", "inputs": [], "outputs": [5], "context": 8}, {"name": "(auto) SkMatrix::~SkMatrix();", "inputs": [5], "outputs": [], "context": 0}, {"name": "add_self_path_matrix", "inputs": [6, 5], "outputs": [6, 5], "context": 1}, {"name": "add_self_path", "inputs": [6], "outputs": [6], "context": 0}, {"name": "add_self_path_reverse", "inputs": [6], "outputs": [6], "context": 0}, {"name": "offset_self", "inputs": [6], "outputs": [6], "context": 8}, {"name": "transform_self", "inputs": [6, 5], "outputs": [6, 5], "context": 0}, {"name": "(auto) SkPath::SkPath();", "inputs": [], "outputs": [6], "context": 0}, {"name": "(auto) SkPath::void moveTo(SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 8}, {"name": "(auto) SkPath::void rMoveTo(SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 8}, {"name": "(auto) SkPath::void lineTo(SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 8}, {"name": "(auto) SkPath::void rLineTo(SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 8}, {"name": "(auto) SkPath::void quadTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 16}, {"name": "(auto) SkPath::void rQuadTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 16}, {"name": "(auto) SkPath::void conicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 20}, {"name": "(auto) SkPath::void rConicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 20}, {"name": "(auto) SkPath::void cubicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 24}, {"name": "(auto) SkPath::void rCubicTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 24}, {"name": "(auto) SkPath::void arcTo(SkScalar None, SkScalar None, SkScalar None, SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 20}, {"name": "(auto) SkPath::void arcTo(SkRect None, SkScalar None, SkScalar None, bool None);", "inputs": [6, 3], "outputs": [6, 3], "context": 9}, {"name": "(auto) SkPath::void close();", "inputs": [6], "outputs": [6], "context": 0}, {"name": "(auto) SkPath::void addRect(SkRect None, SkPathDirection None);", "inputs": [6, 3], "outputs": [6, 3], "context": 1}, {"name": "(auto) SkPath::void addRect(SkRect None, SkPathDirection None, unsigned int None);", "inputs": [6, 3], "outputs": [6, 3], "context": 5}, {"name": "(auto) SkPath::void addOval(SkRect None, SkPathDirection None);", "inputs": [6, 3], "outputs": [6, 3], "context": 1}, {"name": "(auto) SkPath::void addOval(SkRect None, SkPathDirection None, unsigned int None);", "inputs": [6, 3], "outputs": [6, 3], "context": 5}, {"name": "(auto) SkPath::void addCircle(SkScalar None, SkScalar None, SkScalar None, SkPathDirection None);", "inputs": [6], "outputs": [6], "context": 13}, {"name": "(auto) SkPath::void addArc(SkRect None, SkScalar None, SkScalar None);", "inputs": [6, 3], "outputs": [6, 3], "context": 8}, {"name": "(auto) SkPath::void addRoundRect(SkRect None, SkScalar None, SkScalar None, SkPathDirection None);", "inputs": [6, 3], "outputs": [6, 3], "context": 9}, {"name": "(auto) SkPath::void addRRect(SkRRect None, SkPathDirection None);", "inputs": [6, 4], "outputs": [6, 4], "context": 1}, {"name": "(auto) SkPath::void addRRect(SkRRect None, SkPathDirection None, unsigned int None);", "inputs": [6, 4], "outputs": [6, 4], "context": 5}, {"name": "(auto) SkPath::void addPath(SkPath None, SkMatrix None, SkPath::AddPathMode None);", "inputs": [6, 6, 5], "outputs": [6, 6, 5], "context": 1}, {"name": "(auto) SkPath::void reverseAddPath(SkPath None);", "inputs": [6, 6], "outputs": [6, 6], "context": 0}, {"name": "(auto) SkPath::void offset(SkScalar None, SkScalar None, SkPath * None);", "inputs": [6, 6], "outputs": [6, 6], "context": 8}, {"name": "(auto) SkPath::void transform(SkMatrix None, SkPath * None);", "inputs": [6, 5, 6], "outputs": [6, 5, 6], "context": 0}, {"name": "(auto) SkPath::void setLastPt(SkScalar None, SkScalar None);", "inputs": [6], "outputs": [6], "context": 8}, {"name": "(auto) SkPath::~SkPath();", "inputs": [6], "outputs": [], "context": 0}, {"name": "(auto) SkRegion::SkRegion();", "inputs": [], "outputs": [7], "context": 0}, {"name": "(auto) SkRegion::bool op(const SkIRect & rect, SkRegion::Op op);", "inputs": [7, 8], "outputs": [7, 8], "context": 1}, {"name": "(auto) SkRegion::int computeRegionComplexity();", "inputs": [7], "outputs": [7], "context": 0}, {"name": "(auto) SkRegion::bool setPath(const SkPath & path, const SkRegion & clip);", "inputs": [7, 6, 7], "outputs": [7, 6, 7], "context": 0}, {"name": "(auto) SkRegion::bool isComplex();", "inputs": [7], "outputs": [7], "context": 0}, {"name": "(auto) SkRegion::bool contains(int32_t x, int32_t y);", "inputs": [7], "outputs": [7], "context": 8}, {"name": "(auto) SkRegion::~SkRegion();", "inputs": [7], "outputs": [], "context": 0}, {"name": "(auto) SkIRect::SkIRect MakeLTRB(int32_t l, int32_t t, int32_t r, int32_t b);", "inputs": [], "outputs": [8], "context": 16}, {"name": "(auto) SkIRect::~SkIRect();", "inputs": [8], "outputs": [], "context": 0}]}