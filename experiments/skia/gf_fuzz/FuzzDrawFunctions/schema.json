{"types": [{"id": 12, "name": "SkPaint"}, {"id": 13, "name": "SkImageInfo"}, {"id": 14, "name": "SkBitmap"}, {"id": 15, "name": "bundle<SkCanvas,SkSurface>"}, {"id": 16, "name": "sk_sp<SkSurface>"}, {"id": 17, "name": "SkFont"}, {"id": 18, "name": "sk_sp<SkTypeface>"}, {"id": 19, "name": "SkCanvas"}, {"id": 20, "name": "SkRect"}, {"id": 21, "name": "SkPath"}, {"id": 22, "name": "sk_sp<SkImage>"}, {"id": 23, "name": "sk_sp<SkTextBlob>"}], "scopes": [{"name": "(auto) SkPaint::SkPaint();", "inputs": [], "outputs": [12], "context": 0}, {"name": "(auto) SkPaint::void setAntiAlias(bool aa);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::void setBlendMode(SkBlendMode mode);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::void setColor(SkColor color);", "inputs": [12], "outputs": [12], "context": 4}, {"name": "(auto) SkPaint::void setDither(bool dither);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::void setStrokeCap(SkPaint::Cap cap);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::void setStrokeJoin(SkPaint::Join join);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::void setStrokeMiter(SkScalar miter);", "inputs": [12], "outputs": [12], "context": 4}, {"name": "(auto) SkPaint::void setStrokeWidth(SkScalar width);", "inputs": [12], "outputs": [12], "context": 4}, {"name": "(auto) SkPaint::void setStyle(SkPaint::Style style);", "inputs": [12], "outputs": [12], "context": 1}, {"name": "(auto) SkPaint::~SkPaint();", "inputs": [12], "outputs": [], "context": 0}, {"name": "(auto) SkImageInfo::SkImageInfo Make(int width, int height, SkColorType ct, SkAlphaType at);", "inputs": [], "outputs": [13], "context": 10}, {"name": "(auto) SkImageInfo::~SkImageInfo();", "inputs": [13], "outputs": [], "context": 0}, {"name": "sk_sp<SkImage> asImage()", "inputs": [14], "outputs": [14, 22], "context": 0}, {"name": "(auto) SkBitmap::SkBitmap();", "inputs": [], "outputs": [14], "context": 0}, {"name": "(auto) SkBitmap::bool tryAllocPixels(const SkImageInfo & info);", "inputs": [14, 13], "outputs": [14, 13], "context": 0}, {"name": "(auto) SkBitmap::void eraseColor(SkColor c);", "inputs": [14], "outputs": [14], "context": 4}, {"name": "(auto) SkBitmap::~SkBitmap();", "inputs": [14], "outputs": [], "context": 0}, {"name": "make_surface", "inputs": [], "outputs": [16], "context": 2}, {"name": "get_canvas", "inputs": [16], "outputs": [15], "context": 0}, {"name": "delete", "inputs": [15], "outputs": [], "context": 0}, {"name": "(auto) sk_sp<SkSurface>::~sk_sp<SkSurface>();", "inputs": [16], "outputs": [], "context": 0}, {"name": "(auto) SkFont::SkFont();", "inputs": [], "outputs": [17], "context": 0}, {"name": "(auto) SkFont::SkFont(sk_sp<SkTypeface> typeface);", "inputs": [18], "outputs": [17, 18], "context": 0}, {"name": "(auto) SkFont::void setForceAutoHinting(bool forceAutoHinting);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setEmbeddedBitmaps(bool embeddedBitmaps);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setEmbolden(bool embolden);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setEdging(SkFont::Edging edging);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setLinearMetrics(bool linearMetrics);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setSubpixel(bool subpixel);", "inputs": [17], "outputs": [17], "context": 1}, {"name": "(auto) SkFont::void setScaleX(SkScalar scaleX);", "inputs": [17], "outputs": [17], "context": 4}, {"name": "(auto) SkFont::void setSkewX(SkScalar skewX);", "inputs": [17], "outputs": [17], "context": 4}, {"name": "(auto) SkFont::void setSize(SkScalar textSize);", "inputs": [17], "outputs": [17], "context": 4}, {"name": "(auto) SkFont::~SkFont();", "inputs": [17], "outputs": [], "context": 0}, {"name": "sk_sp<SkTypeface> MakeDefault()", "inputs": [], "outputs": [18], "context": 0}, {"name": "(auto) sk_sp<SkTypeface>::~sk_sp<SkTypeface>();", "inputs": [18], "outputs": [], "context": 0}, {"name": "drawImageRect", "inputs": [19, 22, 20, 20, 12], "outputs": [19, 22, 20, 20, 12], "context": 1}, {"name": "(auto) SkCanvas::void drawCircle(SkScalar cx, SkScalar cy, SkScalar radius, const SkPaint & paint);", "inputs": [19, 12], "outputs": [19, 12], "context": 12}, {"name": "(auto) SkCanvas::void drawLine(SkScalar x0, SkScalar y0, SkScalar x1, SkScalar y1, const SkPaint & paint);", "inputs": [19, 12], "outputs": [19, 12], "context": 16}, {"name": "(auto) SkCanvas::void drawRect(const SkRect & rect, const SkPaint & paint);", "inputs": [19, 20, 12], "outputs": [19, 20, 12], "context": 0}, {"name": "(auto) SkCanvas::void clipRect(const SkRect & rect, SkClipOp op, bool doAntiAlias);", "inputs": [19, 20], "outputs": [19, 20], "context": 2}, {"name": "(auto) SkCanvas::void drawPath(const SkPath & path, const SkPaint & paint);", "inputs": [19, 21, 12], "outputs": [19, 21, 12], "context": 0}, {"name": "(auto) SkCanvas::void clipPath(const SkPath & path, SkClipOp op, bool doAntiAlias);", "inputs": [19, 21], "outputs": [19, 21], "context": 2}, {"name": "(auto) SkCanvas::void drawPaint(const SkPaint & paint);", "inputs": [19, 12], "outputs": [19, 12], "context": 0}, {"name": "(auto) SkCanvas::void drawImage(const sk_sp<SkImage> & image, SkScalar x, SkScalar y, {SkSamplingOptions()}, const SkPaint * paint);", "inputs": [19, 22, 12], "outputs": [19, 22, 12], "context": 8}, {"name": "(auto) SkCanvas::void drawImage(const sk_sp<SkImage> & image, SkScalar x, SkScalar y, {SkSamplingOptions()}, {nullptr});", "inputs": [19, 22], "outputs": [19, 22], "context": 8}, {"name": "(auto) SkCanvas::void drawTextBlob(const sk_sp<SkTextBlob> & blob, SkScalar x, SkScalar y, const SkPaint & paint);", "inputs": [19, 23, 12], "outputs": [19, 23, 12], "context": 8}, {"name": "(auto) SkRect::constexpr SkRect MakeXYWH(SkScalar x, SkScalar y, SkScalar w, SkScalar h);", "inputs": [], "outputs": [20], "context": 16}, {"name": "(auto) SkRect::constexpr SkRect MakeWH(SkScalar w, SkScalar h);", "inputs": [], "outputs": [20], "context": 8}, {"name": "(auto) SkRect::~SkRect();", "inputs": [20], "outputs": [], "context": 0}, {"name": "(auto) SkPath::SkPath();", "inputs": [], "outputs": [21], "context": 0}, {"name": "(auto) SkPath::void moveTo(SkScalar x, SkScalar y);", "inputs": [21], "outputs": [21], "context": 8}, {"name": "(auto) SkPath::void lineTo(SkScalar x, SkScalar y);", "inputs": [21], "outputs": [21], "context": 8}, {"name": "(auto) SkPath::void quadTo(SkScalar x1, SkScalar y1, SkScalar x2, SkScalar y2);", "inputs": [21], "outputs": [21], "context": 16}, {"name": "(auto) SkPath::void conicTo(SkScalar x1, SkScalar y1, SkScalar x2, SkScalar y2, SkScalar w);", "inputs": [21], "outputs": [21], "context": 20}, {"name": "(auto) SkPath::SkPath & cubicTo(SkScalar x1, SkScalar y1, SkScalar x2, SkScalar y2, SkScalar x3, SkScalar y3);", "inputs": [21], "outputs": [21, 21], "context": 24}, {"name": "(auto) SkPath::void arcTo(SkScalar x1, SkScalar y1, SkScalar x2, SkScalar y2, SkScalar radius);", "inputs": [21], "outputs": [21], "context": 20}, {"name": "(auto) SkPath::void close();", "inputs": [21], "outputs": [21], "context": 0}, {"name": "(auto) SkPath::~SkPath();", "inputs": [21], "outputs": [], "context": 0}, {"name": "(auto) sk_sp<SkImage>::~sk_sp<SkImage>();", "inputs": [22], "outputs": [], "context": 0}, {"name": "sk_sp<SkTextBlob> MakeFromPosText(const void *text, size_t byteLength, const SkPoint pos[], const SkFont &font)", "inputs": [17], "outputs": [17, 23], "context": 45}, {"name": "(auto) sk_sp<SkTextBlob>::~sk_sp<SkTextBlob>();", "inputs": [23], "outputs": [], "context": 0}, {"name": "bundled_drawImageRect", "inputs": [15, 22, 20, 20, 12], "outputs": [15, 22, 20, 20, 12], "context": 1}, {"name": "bundled_(auto) SkCanvas::void drawCircle(SkScalar cx, SkScalar cy, SkScalar radius, const SkPaint & paint);", "inputs": [15, 12], "outputs": [15, 12], "context": 12}, {"name": "bundled_(auto) SkCanvas::void drawLine(SkScalar x0, SkScalar y0, SkScalar x1, SkScalar y1, const SkPaint & paint);", "inputs": [15, 12], "outputs": [15, 12], "context": 16}, {"name": "bundled_(auto) SkCanvas::void drawRect(const SkRect & rect, const SkPaint & paint);", "inputs": [15, 20, 12], "outputs": [15, 20, 12], "context": 0}, {"name": "bundled_(auto) SkCanvas::void clipRect(const SkRect & rect, SkClipOp op, bool doAntiAlias);", "inputs": [15, 20], "outputs": [15, 20], "context": 2}, {"name": "bundled_(auto) SkCanvas::void drawPath(const SkPath & path, const SkPaint & paint);", "inputs": [15, 21, 12], "outputs": [15, 21, 12], "context": 0}, {"name": "bundled_(auto) SkCanvas::void clipPath(const SkPath & path, SkClipOp op, bool doAntiAlias);", "inputs": [15, 21], "outputs": [15, 21], "context": 2}, {"name": "bundled_(auto) SkCanvas::void drawPaint(const SkPaint & paint);", "inputs": [15, 12], "outputs": [15, 12], "context": 0}, {"name": "bundled_(auto) SkCanvas::void drawImage(const sk_sp<SkImage> & image, SkScalar x, SkScalar y, {SkSamplingOptions()}, const SkPaint * paint);", "inputs": [15, 22, 12], "outputs": [15, 22, 12], "context": 8}, {"name": "bundled_(auto) SkCanvas::void drawImage(const sk_sp<SkImage> & image, SkScalar x, SkScalar y, {SkSamplingOptions()}, {nullptr});", "inputs": [15, 22], "outputs": [15, 22], "context": 8}, {"name": "bundled_(auto) SkCanvas::void drawTextBlob(const sk_sp<SkTextBlob> & blob, SkScalar x, SkScalar y, const SkPaint & paint);", "inputs": [15, 23, 12], "outputs": [15, 23, 12], "context": 8}]}